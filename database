select * from ish_insurancepackages;
select * from ish_InsurancePolicies;
select * from ish_Agent;
-- Create the table with the specified columns
CREATE TABLE  ish_insurancepackages (
    insp_id INT PRIMARY KEY,
    insp_title VARCHAR(60),
    insp_desc VARCHAR(255),
    insp_status CHAR(2),
    insp_range_start NUMERIC,
    insp_range_end NUMERIC,
    insp_agelimit_start INT,
    insp_agelimit_end INT
);

-- Insert some values into the table
INSERT INTO  ish_insurancepackages (insp_id, insp_title, insp_desc, insp_status, insp_range_start, insp_range_end, insp_agelimit_start, insp_agelimit_end)
VALUES
    (1, 'Insurance Package 1', 'Description for Package 1', 'A', 1000, 5000, 18, 65),
    (2, 'Insurance Package 2', 'Description for Package 2', 'B', 2000, 6000, 21, 70),
    (3, 'Insurance Package 3', 'Description for Package 3', 'C', 1500, 5500, 20, 60);

-- Optionally, you can add more INSERT statements to insert additional values.

-- Create the table with the specified columns
CREATE TABLE ish_InsurancePolicies (
    iplc_id INT PRIMARY KEY,
    iplc_cust_id INT,
    iplc_cdate DATE,
    iplc_sum_assured NUMERIC,
    iplc_applicable_date DATE,
    iplc_insp_id INT,
    iplc_yrly_prem_amount NUMERIC,
    iplc_expdate DATE,
    iplc_agnt_id INT,
    FOREIGN KEY (iplc_insp_id) REFERENCES ish_insurancepackages(insp_id),
    FOREIGN KEY (iplc_agnt_id) REFERENCES ish_Agent(AGNT_id)
);

-- Insert some values into the table
INSERT INTO ish_InsurancePolicies (iplc_id, iplc_cust_id, iplc_cdate, iplc_sum_assured, iplc_applicable_date, iplc_insp_id, iplc_yrly_prem_amount, iplc_expdate, iplc_agnt_id)
VALUES
    (1, 101, '2023-09-25', 50000, '2023-10-01', 1, 2500, '2024-09-25', 1),
    (2, 102, '2023-09-26', 75000, '2023-10-02', 2, 3000, '2024-09-26', 2),
    (3, 103, '2023-09-27', 100000, '2023-10-03', 3, 3500, '2024-09-27', 3);

-- Optionally, you can add more INSERT statements to insert additional values.
-- Create the table with the specified columns
CREATE TABLE ish_Agent (
    AGNT_id INT PRIMARY KEY,
    AGNT_name VARCHAR(225)
);

-- Insert some values into the table
INSERT INTO ish_Agent (AGNT_id, AGNT_name)
VALUES
    (1, 'Agent 1'),
    (2, 'Agent 2'),
    (3, 'Agent 3');

-- Optionally, you can add more INSERT statements to insert additional values.





select * from ish_insurancepackages;
select * from ish_InsurancePolicies;
select * from ish_Agent;
-- Create the table with the specified columns
CREATE TABLE  ish_insurancepackages (
    insp_id INT PRIMARY KEY,
    insp_title VARCHAR(60),
    insp_desc VARCHAR(255),
    insp_status CHAR(2),
    insp_range_start NUMERIC,
    insp_range_end NUMERIC,
    insp_agelimit_start INT,
    insp_agelimit_end INT
);

-- Insert some values into the table
INSERT INTO  ish_insurancepackages (insp_id, insp_title, insp_desc, insp_status, insp_range_start, insp_range_end, insp_agelimit_start, insp_agelimit_end)
VALUES
    (1, 'Insurance Package 1', 'Description for Package 1', 'A', 1000, 5000, 18, 65),
    (2, 'Insurance Package 2', 'Description for Package 2', 'B', 2000, 6000, 21, 70),
    (3, 'Insurance Package 3', 'Description for Package 3', 'C', 1500, 5500, 20, 60);


-- Optionally, you can add more INSERT statements to insert additional values.

-- Create the table with the specified columns
CREATE TABLE ish_InsurancePolicies (
    iplc_id SERIAL PRIMARY KEY,
    iplc_cust_id INT,
    iplc_cdate DATE,
    iplc_sum_assured NUMERIC,
    iplc_applicable_date DATE,
    iplc_insp_id INT,
    iplc_yrly_prem_amount NUMERIC,
    iplc_expdate DATE,
    iplc_agnt_id INT,
    FOREIGN KEY (iplc_insp_id) REFERENCES ish_insurancepackages(insp_id),
    FOREIGN KEY (iplc_agnt_id) REFERENCES ish_Agent(AGNT_id)
);

-- Insert some values into the table
INSERT INTO ish_InsurancePolicies (iplc_id, iplc_cust_id, iplc_cdate, iplc_sum_assured, iplc_applicable_date, iplc_insp_id, iplc_yrly_prem_amount, iplc_expdate, iplc_agnt_id)
VALUES
    (1, 101, '2023-09-25', 50000, '2023-10-01', 1, 2500, '2024-09-25', 1),
    (2, 102, '2023-09-26', 75000, '2023-10-02', 2, 3000, '2024-09-26', 2),
    (3, 103, '2023-09-27', 100000, '2023-10-03', 3, 3500, '2024-09-27', 3);

-- Optionally, you can add more INSERT statements to insert additional values.
-- Create the table with the specified columns
CREATE TABLE ish_Agent (
    AGNT_id INT PRIMARY KEY,
    AGNT_name VARCHAR(225)
);

-- Insert some values into the table
INSERT INTO ish_Agent (AGNT_id, AGNT_name)
VALUES
    (1, 'Agent 1'),
    (2, 'Agent 2'),
    (3, 'Agent 3');

-- Optionally, you can add more INSERT statements to insert additional values.

-- Insert additional values into the table
INSERT INTO ish_insurancepackages (insp_id, insp_title, insp_desc, insp_status, insp_range_start, insp_range_end, insp_agelimit_start, insp_agelimit_end)
VALUES
    (4, 'Insurance Package 4', 'Description for Package 4', 'D', 2500, 7000, 22, 75),
    (5, 'Insurance Package 5', 'Description for Package 5', 'E', 3000, 8000, 25, 80);
    
    
CREATE TABLE nikhila_InsurancePolicies (
    iplc_id SERIAL PRIMARY KEY,
    iplc_cust_id INT,
    iplc_cdate DATE,
    iplc_sum_assured NUMERIC,
    iplc_applicable_date DATE,
    iplc_insp_id INT,
    iplc_yrly_prem_amount NUMERIC,
    iplc_expdate DATE,
    iplc_agnt_id INT,
    iplc_status VARCHAR(255) DEFAULT 'pending',
    iplc_count INT,
    FOREIGN KEY (iplc_insp_id) REFERENCES ish_insurancepackages(insp_id),
    FOREIGN KEY (iplc_agnt_id) REFERENCES ish_Agent(AGNT_id)
);

 

CREATE TABLE ish_InsurancePolicies (
    iplc_id SERIAL PRIMARY KEY,
    iplc_cust_id INT,
    iplc_cdate DATE,
    iplc_sum_assured NUMERIC,
    iplc_applicable_date DATE,
    iplc_insp_id INT,
    iplc_yrly_prem_amount NUMERIC,
    iplc_expdate DATE,
    iplc_agnt_id INT,
    iplc_status VARCHAR(255) DEFAULT 'pending',
    iplc_count INT,
    FOREIGN KEY (iplc_insp_id) REFERENCES ish_insurancepackages(insp_id),
    FOREIGN KEY (iplc_agnt_id) REFERENCES ish_Agent(AGNT_id)
);

drop table ish_InsurancePolicies;
select * from InsurancePolicySchedule;
select * from ish_InsurancePolicies;

-- Inserting sample rows into the ish_InsurancePolicies table
INSERT INTO ish_InsurancePolicies (iplc_cust_id, iplc_cdate, iplc_sum_assured, iplc_applicable_date, iplc_insp_id, iplc_yrly_prem_amount, iplc_expdate, iplc_agnt_id, iplc_count)
VALUES
    (1, '2023-09-25', 100000, '2023-10-01', 1, 1200.00, '2024-09-25', 1, 1),
    (2, '2023-09-26', 150000, '2023-10-15', 2, 1800.00, '2024-09-26', 2, 2),
    (3, '2023-09-27', 200000, '2023-10-20', 3, 2400.00, '2024-09-27', 3, 12);


CREATE OR REPLACE FUNCTION insert_policy_schedule()
RETURNS TRIGGER AS $$
DECLARE
    schedule_date DATE;
BEGIN
    IF NEW.iplc_status = 'approved' AND NEW.iplc_count > 0 THEN
        -- Calculate the schedule_date increment based on (12 / iplc_count) months
        schedule_date := NEW.iplc_applicable_date;
        
        FOR i IN 1..NEW.iplc_count LOOP
            INSERT INTO ish_InsurancePolicySchedule (iplc_id, iplc_sindex, iplc_date, iplc_premium, iplc_paid_date)
            VALUES (NEW.iplc_id, i, schedule_date, NEW.iplc_yrly_prem_amount / NEW.iplc_count, NULL);
            
            -- Increment the schedule_date by (12 / iplc_count) months
            schedule_date := schedule_date + INTERVAL '1 month' * (12 / NEW.iplc_count);
        END LOOP;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER policy_status_approval_trigger
AFTER UPDATE ON ish_InsurancePolicies
FOR EACH ROW
EXECUTE FUNCTION insert_policy_schedule();

drop table ish_InsurancePolicySchedule;
UPDATE ish_InsurancePolicies SET iplc_status = 'approved' WHERE iplc_id =5 ;
CREATE TABLE ish_InsurancePolicySchedule (
    iplc_id int,
    iplc_sindex SMALLINT,
    iplc_date DATE,
    iplc_premium NUMERIC,
    iplc_paid_date DATE
);

DROP TRIGGER IF EXISTS policy_status_approval_trigger ON ish_InsurancePolicies;

select * from ish_InsurancePolicySchedule;
